import os
import subprocess
import logging
from datetime import datetime, timedelta
import glob
from typing import Optional

from anyio import sleep
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

from ai import generate_reply

from db import (
    get_sorted_unprocessed_projects,
    update_project_description,
    fetch_full_description,
    get_projects_by_status,
    get_projects_excluding_status,
    get_all_projects,
    update_project_keywords,
    update_project_clients,
    keyword_matches_project,
    get_projects_by_is_processed,
    mark_project_as_declined,
    is_project_favorite,
    get_favorite_projects,
    mark_project_as_favorite,
    remove_project_from_favorite,
    # save_reply_text,
    # get_reply_text,
    proverka_db
)

from parser import fetch_new_projects, fetch_new_projects_fast

import os

TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

# # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
# load_dotenv()
# TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
# CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
error_log_file = "bot-errors.log"
log_formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
error_handler = logging.FileHandler(error_log_file, encoding="utf-8")
error_handler.setFormatter(log_formatter)
error_handler.setLevel(logging.WARNING)
logging.basicConfig(level=logging.WARNING, handlers=[error_handler])

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
def cleanup_logs(days: int = 5):
    cutoff = datetime.now() - timedelta(days=days)
    for log_file in glob.glob("bot-*.log"):
        try:
            date_part = log_file.split("-")[1].split(".")[0]
            file_date = datetime.strptime(date_part, "%Y-%m-%d")
            if file_date < cutoff:
                os.remove(log_file)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {log_file}: {e}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ test.py
def extract_description(project_id: int, url: str) -> str:
    print(f"[EXTRACT] ‚öôÔ∏è –ó–∞–ø—É—Å–∫ test.py –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id} –ø–æ —Å—Å—ã–ª–∫–µ: {url}")
    try:
        result = subprocess.run(
            ['python', 'test.py', str(project_id), url],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            encoding='utf-8',
            timeout=20
        )

        print(f"[EXTRACT] üì• stdout:\n{result.stdout[:500]}")  # –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        print(f"[EXTRACT] üì• stderr:\n{result.stderr.strip() or '–ù–µ—Ç –æ—à–∏–±–æ–∫'}")

        lines = result.stdout.splitlines()
        description_started = False
        description = []

        for line in lines:
            if "üì§ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ" in line:
                description_started = True
                print(f"[EXTRACT] üü¢ –ù–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ –æ–ø–∏—Å–∞–Ω–∏—è")
                continue
            if description_started:
                print(f"[EXTRACT] ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {line.strip()}")
                description.append(line.strip())

        output = "\n".join(description).strip()
        if output:
            print(f"[EXTRACT] ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {repr(output[:200])}...")
        else:
            print(f"[EXTRACT] ‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –ø—É—Å—Ç—ã–º.")

        return output or "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ."
    except subprocess.TimeoutExpired:
        print(f"[EXTRACT] ‚è±Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è subprocess.run –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç.")
        return "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏."
    except Exception as e:
        print(f"[EXTRACT] üî• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ test.py: {e}")
        return f"üî• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ test.py: {e}"
# def extract_description(project_id: int, url: str) -> str:
#     try:
#         result = subprocess.run(
#             ['python', 'test.py', str(project_id), url],
#             stdout=subprocess.PIPE,
#             stderr=subprocess.PIPE,
#             encoding='utf-8',
#             timeout=20
#         )
#         lines = result.stdout.splitlines()
#         description_started = False
#         description = []
#         for line in lines:
#             if "üì§ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ" in line:
#                 description_started = True
#                 continue
#             if description_started:
#                 description.append(line.strip())
#         output = "\n".join(description).strip()
#         return output or "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ."
#     except subprocess.TimeoutExpired:
#         return "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏."
#     except Exception as e:
#         return f"üî• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ test.py: {e}"

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ user_id
project_sequence = {}

# üëã –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="find_project")],
        [InlineKeyboardButton("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", callback_data="show_projects")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# üì• –ö–æ–º–∞–Ω–¥–∞ /desc <url> ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ
async def desc_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    message_text = update.message.text.strip()
    url = args[0] if args else message_text.split(maxsplit=1)[1] if len(message_text.split()) > 1 else None
    if not url:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /desc <—Å—Å—ã–ª–∫–∞>")
        return
    await update.message.reply_text("üîç –ò–∑–≤–ª–µ–∫–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ...")
    description = extract_description(0, url)
    await update.message.reply_text(description)

# üìä –ö–æ–º–∞–Ω–¥–∞ /status ‚Äî —Å—á–∏—Ç–∞–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
# async def status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     try:
#         count = len(get_sorted_unprocessed_projects())
#         await update.message.reply_text(f"üî¢ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {count}")
#     except Exception as e:
#         logging.warning(f"–û—à–∏–±–∫–∞ –≤ /status: {e}")
#         await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
async def status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = len(get_sorted_unprocessed_projects())
        await update.message.reply_text(f"üî¢ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {count}")

        reply_count=proverka_db()
        await update.message.reply_text(f"üìã –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤: {reply_count}")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –≤ /status: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ user_id –∏ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É)
async def send_project(query, user_id):
    seq = project_sequence.get(user_id)

    if not seq or seq["index"] >= len(seq["list"]):
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="find_projects")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", callback_data="show_projects")]
        ]
        await query.message.reply_text(
            "üì≠ –ë–æ–ª—å—à–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ—Ç. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    pid, link = seq["list"][seq["index"]]
    keyboard = [
        [InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"desc_{pid}")],
        [InlineKeyboardButton("üì® –û—Ç–∫–ª–∏–∫", callback_data=f"reply_{pid}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{pid}")],
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]  # üîô –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]

    is_fav = is_project_favorite(pid)

    if is_fav:
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"unfavorite_{pid}")])
    else:
        keyboard.append([InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"favorite_{pid}")])

    await query.message.reply_text(
        f"üìå –ü—Ä–æ–µ–∫—Ç ID {pid}\nüîó {link}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def send_projects_list(update, context, projects):
    if not projects:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì≠ –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É."
        )
        return

    for pid, link in projects:
        keyboard = [
            [InlineKeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"desc_{pid}")],
            [InlineKeyboardButton("üì® –û—Ç–∫–ª–∏–∫", callback_data=f"reply_{pid}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{pid}")],
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")]
        ]
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üìå –ü—Ä–æ–µ–∫—Ç ID {pid}\nüîó {link}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data == "find_project":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="find_fast_project")],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", callback_data="find_key_project")],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="find_all_project")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]  # üö™ –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        ])
        await query.edit_message_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:", reply_markup=keyboard)

    elif data == "find_all_project":
        # await query.delete_message()
        msg = await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤... 0%")
        # from parser import fetch_new_projects
        await fetch_new_projects(progress_msg=msg)


    elif data == "find_fast_project":
        # await query.delete_message()
        msg = await query.message.reply_text("‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫: –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä...")
        # from parser import fetch_new_projects_fast
        await fetch_new_projects_fast(progress_msg=msg)

    elif data == "find_key_project":
        print("–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")

    elif data == "show_projects":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ", callback_data="show_favorite")],
            [InlineKeyboardButton("üîç –ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", callback_data="show_by_keywords")],
            [InlineKeyboardButton("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π", callback_data="show_not_declined")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="show_declined")],
            [InlineKeyboardButton("üìã –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="show_all")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]  # üö™ –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        ])
        await query.edit_message_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤:", reply_markup=keyboard)

    elif data == "show_favorite":
        projects = get_favorite_projects()
        project_sequence[user_id] = {"list": projects, "index": 0}
        await query.delete_message()
        await send_project(query, user_id)

    elif data == "main_menu":
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="find_project")],
            [InlineKeyboardButton("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", callback_data="show_projects")]
        ]
        await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "show_declined":
        projects = get_projects_by_is_processed(1)
        project_sequence[user_id] = {"list": projects, "index": 0}
        await query.delete_message()
        await send_project(query, user_id)

    elif data == "show_not_declined":
        projects = get_projects_by_is_processed(2)
        project_sequence[user_id] = {"list": projects, "index": 0}
        await query.delete_message()
        await send_project(query, user_id)

    elif data == "show_all":
        projects = get_all_projects()
        project_sequence[user_id] = {"list": projects, "index": 0}
        await query.delete_message()
        await send_project(query, user_id)

    elif data == "show_by_keywords":
        context.user_data["keyword_mode"] = True
        await query.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")

    elif data == "next_project":
        seq = project_sequence.get(user_id)
        if seq:
            seq["index"] += 1
            await query.delete_message()
            await send_project(query, user_id)


    elif data.startswith("desc_"):
        pid = int(data.split("_")[1])
        link = find_project_by_id(pid)  # üîç –¢–µ–ø–µ—Ä—å –∏—â–µ–º –≤–µ–∑–¥–µ
        if not link:
            await query.message.reply_text("‚ùì –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        extract_description(pid, link)
        description = fetch_full_description(pid)
        await query.edit_message_reply_markup(reply_markup=None)
        seq = project_sequence.get(user_id)
        if seq:
            seq["index"] += 1
        keyboard = [
            [InlineKeyboardButton("üì® –û—Ç–∫–ª–∏–∫", callback_data=f"reply_{pid}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{pid}")],
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]  # üëç –ù–∞–≤–∏–≥–∞—Ü–∏—è
        ]
        markup = InlineKeyboardMarkup(keyboard)
        await query.delete_message()
        await query.message.reply_text(description or "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=markup)

    elif data.startswith("reject_"):
        pid = int(data.split("_")[1])
        mark_project_as_declined(pid)  # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        await query.answer("üö´ –û—Ç–∫–ª–æ–Ω—ë–Ω.")
        seq = project_sequence.get(user_id)
        if seq:
            seq["index"] += 1
        await query.delete_message()
        await send_project(query, user_id)

    elif data.startswith("favorite_"):
        pid = int(data.split("_")[1])
        mark_project_as_favorite(pid)
        await query.answer("‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        await query.delete_message()
        await send_project(query, user_id)

    elif data.startswith("unfavorite_"):
        pid = int(data.split("_")[1])
        remove_project_from_favorite(pid)
        await query.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        await query.delete_message()
        await send_project(query, user_id)

    elif data.startswith("kopi_text"):
        print("üìã –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        # üîç –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ context.user_data
        pid = context.user_data.get("current_project_id")
        print("üÜî –ü–æ–ª—É—á–µ–Ω–Ω—ã–π project_id:", pid)
        if not pid:
            print("‚ùå Project ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data.")
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø—Ä–æ–µ–∫—Ç–∞.")
            return
        # üîÑ –ü–æ–ª—É—á–∞–µ–º reply_text –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import db
        reply_text = db.get_reply_text(pid)
        # reply_text = get_reply_text(pid)
        print("üì¶ –ü–æ–ª—É—á–µ–Ω reply_text –∏–∑ –ë–î:", repr(reply_text))
        if not reply_text:
            print("‚ö†Ô∏è reply_text –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç.")
            await query.edit_message_text("‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        # üîó –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç
        link = find_project_by_id(pid)
        print("üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç:", link)
        # üìã –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç", url=link)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"reply_{pid}")]
        ])
        print("üßæ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∫–ª–∏–∫–∞ –≤ —á–∞—Ç...")
        await query.edit_message_text(
            f"üìã –û—Ç–∫–ª–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n<pre>{reply_text}</pre>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        print("‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.")

    elif data.startswith("edit_text"):
        print("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª–∏–∫")
        pid = context.user_data.get("current_project_id")
        import db
        reply_text = db.get_reply_text(pid)
        # reply_text = get_reply_text(pid)
        if not reply_text:
            await query.edit_message_text("‚ö†Ô∏è –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        context.user_data["editing_state"] = "editing_reply"
        context.user_data["current_project_id"] = pid
        await query.edit_message_text("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∏–∂–µ.")
        await query.message.reply_text(reply_text)

    # elif data.startswith("reply_"):
    #     pid = int(data.split("_")[1])
    #     print(f"pid {pid}")
    #
    #     description = fetch_full_description(pid)
    #     if not description:
    #         link = find_project_by_id(pid)
    #         print(f"link {link}")
    #         if link:
    #             extract_description(pid, link)
    #             description = fetch_full_description(pid)
    #
    #     if not description:
    #         await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.")
    #         return
    #
    #     await query.edit_message_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–∫–ª–∏–∫...")
    #
    #     reply_text = await generate_reply(description, pid)
    #     if reply_text:
    #         from db import save_reply_text
    #         save_reply_text(pid, reply_text)
    #
    #     # if reply_text:
    #         keyboard = InlineKeyboardMarkup([
    #             [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="kopi_text")],
    #             [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_text")],
    #             [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
    #             [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    #         ])
    #         await query.edit_message_text(reply_text, reply_markup=keyboard)
    #     else:
    #         retry_keyboard = InlineKeyboardMarkup([
    #             [InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"retry_reply_{pid}")]
    #         ])
    #         await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫.", reply_markup=retry_keyboard)

    # elif data.startswith("reply_"):
    #     pid = int(data.split("_")[1])
    #     context.user_data["current_project_id"] = pid  # üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
    #     print("üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_project_id:", pid)
    #
    #     print(f"[BOT] ‚ñ∂Ô∏è –ù–∞—á–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {pid}")
    #
    #     description = fetch_full_description(pid)
    #     print(f"[BOT] üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ë–î: {description[:100]}")  # –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
    #
    #     if not description:
    #         print(f"[BOT] ‚ö†Ô∏è –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ–±—É–µ–º fetch –ø–æ —Å—Å—ã–ª–∫–µ‚Ä¶")
    #         link = find_project_by_id(pid)
    #         print(f"[BOT] üîó –°—Å—ã–ª–∫–∞: {link}")
    #         if link:
    #             extract_description(pid, link)
    #             description = fetch_full_description(pid)
    #             print(f"[BOT] üìÑ –ü–æ—Å–ª–µ fetch: {description[:100]}")
    #
    #     if not description:
    #         await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.")
    #         print(f"[BOT] ‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    #         return
    #
    #     await query.edit_message_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–∫–ª–∏–∫...")
    #     print(f"[BOT] üß† –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–∫–ª–∏–∫‚Ä¶'")
    #
    #     reply_text = await generate_reply(description, pid)
    #     print(f"[BOT] ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–∫–ª–∏–∫:\n{reply_text}")
    #
    #     if reply_text:
    #         from db import save_reply_text
    #         print(f"[BOT] üíæ –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å save_reply_text‚Ä¶")
    #         save_reply_text(pid, reply_text)
    #         print(f"[BOT] ‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    #
    #         keyboard = InlineKeyboardMarkup([
    #             [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="kopi_text")],
    #             [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_text")],
    #             [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
    #             [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    #         ])
    #         print(f"[BOT] üßæ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫ –≤ —á–∞—Ç–µ‚Ä¶")
    #         await query.edit_message_text(reply_text, reply_markup=keyboard)
    #     else:
    #         print(f"[BOT] ‚ö†Ô∏è –û—Ç–∫–ª–∏–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä")
    #         retry_keyboard = InlineKeyboardMarkup([
    #             [InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"retry_reply_{pid}")]
    #         ])
    #         await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫.", reply_markup=retry_keyboard)

    elif data.startswith("reply_"):
        pid = int(data.split("_")[1])
        context.user_data["current_project_id"] = pid
        print("üìù –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_project_id:", pid)

        from db import get_reply_text, save_reply_text

        print(f"[BOT] ‚ñ∂Ô∏è –ó–∞–ø—Ä–æ—à–µ–Ω –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {pid}")

        # üí¨ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –æ—Ç–∫–ª–∏–∫ –∏–∑ –ë–î
        cached_reply = get_reply_text(pid)
        print(f"[DB] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ reply_text –≤ –ë–î: {repr(cached_reply)}")

        if cached_reply:
            print(f"[BOT] ‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ç–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="kopi_text")],
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_text")],
                [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await query.edit_message_text(cached_reply, reply_markup=keyboard)
            return  # ‚õî –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

        # üì¶ –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print(f"[BOT] üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞‚Ä¶")
        description = fetch_full_description(pid)
        print(f"[DEBUG] raw description: {repr(description)}")
        # print(f"[BOT] üìÑ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –ë–î: {description[:100]}")
        # print(f"[DEBUG] –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π: {repr(description)}")

        if not description:
        # if description is None:
            print(f"[BOT] ‚ö†Ô∏è –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è ‚Äî –ø—Ä–æ–±—É–µ–º fetch –ø–æ —Å—Å—ã–ª–∫–µ")
            link = find_project_by_id(pid)
            print(f"[BOT] üîó –°—Å—ã–ª–∫–∞: {link}")
            if link:
                extract_description(pid, link)
                description = fetch_full_description(pid)
                print(f"[BOT] üìÑ –ü–æ—Å–ª–µ fetch: {description[:100]}")

        if not description:
            print(f"[BOT] ‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.")
            return

        await query.edit_message_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–∫–ª–∏–∫...")
        reply_text = await generate_reply(description, pid)
        print(f"[BOT] ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫:\n{reply_text}")

        if reply_text:
            print(f"[BOT] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫ –≤ –ë–î‚Ä¶")
            save_reply_text(pid, reply_text)

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="kopi_text")],
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_text")],
                [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            print(f"[BOT] ‚úÖ –û—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")
            await query.edit_message_text(reply_text, reply_markup=keyboard)
        else:
            print(f"[BOT] ‚ö†Ô∏è –û—Ç–∫–ª–∏–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
            retry_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"retry_reply_{pid}")]
            ])
            await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫.", reply_markup=retry_keyboard)

    elif data.startswith("retry_reply_"):
        pid = int(data.split("_")[2])
        print(f"[RETRY] üîÑ –ü–æ–≤—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {pid}")
        description = fetch_full_description(pid)
        if not description:
            link = find_project_by_id(pid)
            print(f"link {link}")
            if link:
                extract_description(pid, link)
                description = fetch_full_description(pid)
        if not description:
            await query.edit_message_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        await query.edit_message_text("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞...")
        reply_text = await generate_reply(description, pid)
        if reply_text:
            from db import save_reply_text
            print(f"[BOT] üíæ –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å save_reply_text‚Ä¶")
            save_reply_text(pid, reply_text)
            print(f"[BOT] ‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        # if reply_text:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="kopi_text")],
                [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_text")],
                [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await query.edit_message_text(reply_text, reply_markup=keyboard)
        else:
            retry_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ï—â—ë –ø–æ–ø—ã—Ç–∫–∞", callback_data=f"retry_reply_{pid}")]
            ])
            await query.edit_message_text("‚ùå –°–±–æ–π –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ.", reply_markup=retry_keyboard)

    # elif data.startswith("reply_"):
    #     pid = int(data.split("_")[1])
    #     print(f"pid {pid}")
    #     description = fetch_full_description(pid)
    #     if not description:
    #         link = find_project_by_id(pid)
    #         print(f"link {link}")
    #         if link:
    #             extract_description(pid, link)
    #             description = fetch_full_description(pid)
    #
    #     if not description:
    #         await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.")
    #         return
    #
    #     # await query.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–∫–ª–∏–∫...")
    #     await query.edit_message_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–∫–ª–∏–∫...")
    #     reply_text = await generate_reply(description, pid)
    #     keyboard = InlineKeyboardMarkup([
    #         [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="kopi_text")],
    #         [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_text")],
    #         [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
    #         [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]  # üö™ –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    #     ])
    #     await query.edit_message_text(reply_text, reply_markup=keyboard)
    #
    #     # await query.message.reply_text(reply_text)

# async def handle_text_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     user_id = update.effective_user.id
#     text = update.message.text
#
#     if context.user_data.get("editing_state") == "editing_reply":
#         new_text = text
#         pid = context.user_data.get("current_project_id")
#         save_reply_text(pid, new_text)
#         context.user_data["editing_state"] = None
#
#         keyboard = InlineKeyboardMarkup([
#             [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="kopi_text")],
#             [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_text")],
#             [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
#             [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#         ])
#         await update.message.reply_text(f"‚úÖ –û—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n\n{new_text}", reply_markup=keyboard)

async def handle_text_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    print(f"[MSG] ‚úâÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")

    if context.user_data.get("editing_state") == "editing_reply":
        pid = context.user_data.get("current_project_id")
        print(f"[EDIT] üõ†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {pid}")

        if not pid:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø—Ä–æ–µ–∫—Ç–∞.")
            return

        from db import save_reply_text
        save_reply_text(pid, text)
        print(f"[EDIT] ‚úÖ –û—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î:\n{text}")

        context.user_data["editing_state"] = None  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="kopi_text")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_text")],
            [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await update.message.reply_text(f"‚úÖ –û—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n\n{text}", reply_markup=keyboard)


# üí¨ –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # ‚úèÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª–∏–∫–∞
    if context.user_data.get("editing_state") == "editing_reply":
        pid = context.user_data.get("current_project_id")
        new_text = update.message.text

        print(f"[EDIT] üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {pid}")

        if not pid:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø—Ä–æ–µ–∫—Ç–∞.")
            return

        from db import save_reply_text
        save_reply_text(pid, new_text)

        context.user_data["editing_state"] = None  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data="kopi_text")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_text")],
            [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_project")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await update.message.reply_text("‚úÖ –û—Ç–∫–ª–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=keyboard)
        return

    # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ keyword_mode
    if context.user_data.get("keyword_mode"):
        context.user_data["keyword_mode"] = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞

        # üîé –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = [k.strip().lower() for k in text.split(",")]

        # üîç –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ keyword_found
        all_projects = get_sorted_unprocessed_projects()  # [(pid, link)]
        matched_projects = [
            (pid, link) for pid, link in all_projects
            if keyword_matches_project(pid, keywords)
        ]

        user_id = update.effective_user.id
        if matched_projects:
            project_sequence[user_id] = {"list": matched_projects, "index": 0}
            await send_project(update, user_id)
        else:
            keyboard = [
                [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="find_projects")],
                [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", callback_data="show_projects")]
            ]
            await update.message.reply_text(
                "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return

    # üëá –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ fallback
    if text.startswith("/desc "):
        await desc_handler(update, context)

# async def message_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     text = update.message.text.strip()
#
#     if context.user_data.get("keyword_mode"):
#         context.user_data["keyword_mode"] = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
#
#         # üîé –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
#         keywords = [k.strip().lower() for k in text.split(",")]
#
#         # üîç –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ keyword_found
#         all_projects = get_sorted_unprocessed_projects()  # [(pid, link)]
#         matched_projects = [
#             (pid, link) for pid, link in all_projects
#             if keyword_matches_project(pid, keywords)
#         ]
#
#         user_id = update.effective_user.id
#         if matched_projects:
#             project_sequence[user_id] = {"list": matched_projects, "index": 0}
#             await send_project(update, user_id)
#         else:
#             # await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")
#             keyboard = [
#                 [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="find_projects")],
#                 [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", callback_data="show_projects")]
#             ]
#             await update.message.reply_text(
#                 "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
#                 reply_markup=InlineKeyboardMarkup(keyboard)
#             )
#         return
#
#     # üëá –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ fallback
#     if text.startswith("/desc "):
#         await desc_handler(update, context)

# üîÅ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏–∑ —Ñ–∞–π–ª–∞ queue.txt
async def monitor_queue_job(context: ContextTypes.DEFAULT_TYPE):
    try:
        if os.path.exists("queue.txt"):
            with open("queue.txt", "r", encoding="utf-8") as f:
                urls = [line.strip() for line in f if line.strip()]
            if urls:
                for url in urls:
                    description = extract_description(0, url)
                    await context.bot.send_message(chat_id=CHAT_ID, text=description)
                with open("queue.txt", "w", encoding="utf-8") as f:
                    f.write("")
    except Exception as e:
        logging.warning(f"–û—á–µ—Ä–µ–¥—å: {e}")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ id
def find_project_by_id(pid: int) -> Optional[str]:
    sources = [
        get_sorted_unprocessed_projects(),      # –ù–æ–≤—ã–π (is_processed = 0)
        get_projects_by_is_processed(1),        # –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–π (is_processed = 1)
        get_projects_by_is_processed(2),        # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π (is_processed = 2)
    ]

    for source in sources:
        for i, link in source:
            if i == pid:
                return link
    return None

# üöÄ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    cleanup_logs()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start_handler))
    app.add_handler(CommandHandler("desc", desc_handler))
    app.add_handler(CommandHandler("status", status_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_router))
    # app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_re/ply))
    app.add_handler(CallbackQueryHandler(callback_handler))

    app.job_queue.run_repeating(monitor_queue_job, interval=5, first=5)

    print("üß† –ë–æ—Ç –≥–æ—Ç–æ–≤.")
    app.run_polling()

if __name__ == "__main__":
    main()