# # # # import os
# # # # from dotenv import load_dotenv
# # # # import aiohttp
# # # #
# # # # # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
# # # # load_dotenv()
# # # # OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")
# # # #
# # # # async def generate_dual_reply(description: str, project_id: int) -> str:
# # # #     prompt = f"""
# # # # –¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç ID {project_id}.
# # # # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n{description}\n
# # # # –û—Ç–∫–ª–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —Ç—ã —Ä–µ—à–∏—à—å –∑–∞–¥–∞—á—É –∫–ª–∏–µ–Ω—Ç–∞.
# # # # """
# # # #
# # # #     async with aiohttp.ClientSession() as session:
# # # #         headers = {
# # # #             "Authorization": f"Bearer {OPENROUTER_KEY}",
# # # #             "Content-Type": "application/json"
# # # #         }
# # # #
# # # #         async def fetch_model_reply(model_name: str) -> str:
# # # #             response = await session.post(
# # # #                 "https://openrouter.ai/api/v1/chat/completions",
# # # #                 headers=headers,
# # # #                 json={
# # # #                     "model": model_name,
# # # #                     "messages": [{"role": "user", "content": prompt}]
# # # #                 }
# # # #             )
# # # #             data = await response.json()
# # # #             return data["choices"][0]["message"]["content"].strip()
# # # #
# # # #         # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏ –æ—Ç –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
# # # #         try:
# # # #             claude_reply = await fetch_model_reply("anthropic/claude-3-sonnet")
# # # #             deepseek_reply = await fetch_model_reply("deepseek-chat")
# # # #         except Exception as e:
# # # #             return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª–∏–∫–æ–≤: {e}"
# # # #
# # # #         return (
# # # #             f"üü¶ –û—Ç–∫–ª–∏–∫ –æ—Ç Claude 3.5 Sonnet:\n\n{claude_reply}\n\n"
# # # #             f"üü® –û—Ç–∫–ª–∏–∫ –æ—Ç DeepSeek R1:\n\n{deepseek_reply}"
# # # #         )
# # #
# # # import os
# # # import aiohttp
# # # from dotenv import load_dotenv
# # #
# # # # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
# # # load_dotenv()
# # # OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")
# # #
# # # async def generate_dual_reply(description: str, project_id: int) -> str:
# # #     print(f"[FUNC] üöÄ –°—Ç–∞—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ dual-reply –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
# # #     print(f"[FUNC] üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}")
# # #
# # #     prompt = (
# # #         f"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç ID {project_id}.\n"
# # #         f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n{description}\n\n"
# # #         f"–û—Ç–∫–ª–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, —É–≤–µ—Ä–µ–Ω–Ω—ã–º –∏ –æ–±—ä—è—Å–Ω—è—Ç—å, –∫–∞–∫ —Ç—ã —Ä–µ—à–∏—à—å –∑–∞–¥–∞—á—É."
# # #     )
# # #
# # #     async with aiohttp.ClientSession() as session:
# # #         headers = {
# # #             "Authorization": f"Bearer {OPENROUTER_KEY}",
# # #             "Content-Type": "application/json"
# # #         }
# # #
# # #         async def fetch_reply(model_name: str) -> str:
# # #             print(f"[FETCH] üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {model_name}")
# # #             try:
# # #                 response = await session.post(
# # #                     "https://openrouter.ai/api/v1/chat/completions",
# # #                     headers=headers,
# # #                     json={
# # #                         "model": model_name,
# # #                         "messages": [{"role": "user", "content": prompt}]
# # #                     }
# # #                 )
# # #
# # #                 print(f"[FETCH] üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç {model_name}: {response.status}")
# # #                 data = await response.json()
# # #                 print(f"[FETCH] üì¶ –û—Ç–≤–µ—Ç JSON –æ—Ç {model_name}:\n{data}")
# # #
# # #                 if "choices" not in data or not data["choices"]:
# # #                     print(f"[ERROR] ‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ choices.")
# # #                     return f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
# # #
# # #                 reply = data["choices"][0]["message"]["content"].strip()
# # #                 print(f"[FETCH] ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –æ—Ç {model_name}")
# # #                 return reply
# # #
# # #             except Exception as e:
# # #                 print(f"[ERROR] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {model_name}: {e}")
# # #                 return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç –º–æ–¥–µ–ª–∏ {model_name}: {str(e)}"
# # #
# # #         # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏ –æ—Ç –¥–≤—É—Ö –º–æ–¥–µ–ª–µ–π
# # #         claude_text = await fetch_reply("command-r-plus")
# # #         deepseek_text = await fetch_reply("deepseek/deepseek-chat-v3-0324:free")
# # #
# # #         final_reply = (
# # #             f"üü¶ –û—Ç–∫–ª–∏–∫ –æ—Ç Claude 3.5 Sonnet:\n\n{claude_text}\n\n"
# # #             f"üü® –û—Ç–∫–ª–∏–∫ –æ—Ç DeepSeek R1:\n\n{deepseek_text}"
# # #         )
# # #
# # #         print(f"[FUNC] üì® –§–∏–Ω–∞–ª—å–Ω—ã–π dual-reply:\n{final_reply}")
# # #         return final_reply
# #
# # import os
# # import aiohttp
# # from dotenv import load_dotenv
# #
# # # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# # load_dotenv()
# # OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")
# #
# # async def generate_reply(description: str, project_id: int) -> str:
# #     print(f"[FUNC] üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
# #     print(f"[FUNC] üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}")
# #
# #     prompt = (
# #         # f"–¢—ã —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É –±—Ä–µ–Ω–¥–∏–Ω–≥—É –∏ digital-–ø—Ä–æ–¥—É–∫—Ç–∞–º.\n"
# #         f"–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä.\n"
# #         f"–ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ID {project_id} –Ω–∏–∂–µ:\n\n{description}\n\n"
# #         f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–∫–ª–∏–∫ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É, "
# #         f"—É–ø–æ–º–∏–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç –∏ –ø–æ–¥—Ö–æ–¥. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ. "
# #         f"–ù–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–µ –±–æ–ª–µ–µ 200-500 —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ. "
# #         f"–ù–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ, —Å–∏–º–≤–æ–ª–æ–≤ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ. "
# #         f"–ù–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä ***–û—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç*** –∏–ª–∏ –í–∞—à –ø—Ä–æ–µ–∫—Ç... "
# #         f"–¢–∞–∫–∂–µ –º–Ω–æ–≥–æ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–æ–≤ —ç—Ç–æ –ª–∏—à–Ω–µ–µ. –ù–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ –∏–¥–µ—Ç –∫–∞–∫–æ–π-—Ç–æ –ø–µ—Ä–µ—á–µ–Ω—å, –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "-" –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é. "
# #         f"–í –∫–æ–Ω—Ü–µ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –° —É–≤–∞–∂–µ–Ω–∏–µ–º –î–º–∏—Ç—Ä–∏–π. "
# #     )
# #
# #     async with aiohttp.ClientSession() as session:
# #         url = "https://openrouter.ai/api/v1/chat/completions"
# #         headers = {
# #             "Authorization": f"Bearer {OPENROUTER_KEY}",
# #             "Content-Type": "application/json"
# #         }
# #         payload = {
# #             "model": "deepseek/deepseek-chat-v3-0324:free",
# #             "messages": [{"role": "user", "content": prompt}]
# #         }
# #
# #         try:
# #             print(f"[FETCH] üì§ Payload:\n{payload}")
# #             print(f"[FETCH] üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ DeepSeek...")
# #             response = await session.post(url, headers=headers, json=payload)
# #             print(f"[FETCH] üì° –°—Ç–∞—Ç—É—Å: {response.status}")
# #             data = await response.json()
# #             print(f"[FETCH] üì¶ –û—Ç–≤–µ—Ç:\n{data}")
# #
# #             if "choices" not in data or not data["choices"]:
# #                 return "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–∫–ª–∏–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
# #
# #             reply = data["choices"][0]["message"]["content"].strip()
# #             print(f"[FUNC] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:\n{reply}")
# #             return reply
# #
# #         except Exception as e:
# #             print(f"[ERROR] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
# #             return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∫–ª–∏–∫: {str(e)}"
#
#
# # import os
# # import aiohttp
# # import asyncio
# # from dotenv import load_dotenv
# #
# # # üîê –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
# # load_dotenv()
# # OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")
#
# # async def generate_reply(description: str, project_id: int) -> str:
# #     print(f"[FUNC] üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
# #     print(f"[FUNC] üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}")
# #
# #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞
# #     if not OPENROUTER_KEY:
# #         print("[ERROR] üõë –ö–ª—é—á OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
# #         return "üö´ –û—à–∏–±–∫–∞: –∫–ª—é—á API –Ω–µ –∑–∞–¥–∞–Ω."
# #
# #     prompt = (
# #         f"–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä.\n"
# #         f"–ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ID {project_id} –Ω–∏–∂–µ:\n\n{description}\n\n"
# #         f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–∫–ª–∏–∫ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É, "
# #         f"—É–ø–æ–º–∏–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç –∏ –ø–æ–¥—Ö–æ–¥. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ. "
# #         f"–ù–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–µ –±–æ–ª–µ–µ 200-500 —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ. "
# #         f"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ. –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∏–ø–∞ '–û—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç', –±–µ–∑ –ª–∏—à–Ω–µ–π —Å–∏–º–≤–æ–ª–∏–∫–∏. "
# #         f"–ï—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—à—å —Ü–µ–Ω—É, —Ç–æ –æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–ª–∏ –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π –≥—Ä–∏–≤–Ω–µ –∏–ª–∏ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê. "
# #         f"–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π '-' –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å '–° —É–≤–∞–∂–µ–Ω–∏–µ–º –î–º–∏—Ç—Ä–∏–π'."
# #     )
# #
# #     url = "https://openrouter.ai/api/v1/chat/completions"
# #     headers = {
# #         "Authorization": f"Bearer {OPENROUTER_KEY}",
# #         "Content-Type": "application/json"
# #     }
# #     payload = {
# #         "model": "deepseek/deepseek-chat-v3-0324:free",
# #         "messages": [{"role": "user", "content": prompt}]
# #     }
# #
# #     timeout = aiohttp.ClientTimeout(total=25)  # ‚è±Ô∏è —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
# #     try:
# #         print(f"[FETCH] üì§ Payload:\n{payload}")
# #         print(f"[FETCH] üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ DeepSeek...")
# #
# #         async with aiohttp.ClientSession(timeout=timeout) as session:
# #             try:
# #                 response = await session.post(url, headers=headers, json=payload)
# #             except Exception as post_error:
# #                 print(f"[ERROR] üß® –û—à–∏–±–∫–∞ –ø—Ä–∏ POST-–∑–∞–ø—Ä–æ—Å–µ: {post_error}")
# #                 return "üö´ –°–±–æ–π –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å OpenRouter."
# #
# #             print(f"[FETCH] üì° –°—Ç–∞—Ç—É—Å: {response.status}")
# #
# #             if response.status != 200:
# #                 error_text = await response.text()
# #                 print(f"[ERROR] üìÑ –û—Ç–≤–µ—Ç –æ—Ç API:\n{error_text}")
# #                 return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}"
# #
# #             data = await response.json()
# #             print(f"[FETCH] üì¶ –û—Ç–≤–µ—Ç:\n{data}")
# #
# #             if "choices" not in data or not data["choices"]:
# #                 return "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–∫–ª–∏–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
# #
# #             reply = data["choices"][0]["message"]["content"].strip()
# #             print(f"[FUNC] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:\n{reply}")
# #             return reply
# #
# #     except asyncio.TimeoutError:
# #         print("[ERROR] ‚è≥ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞.")
# #         return "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
# #
# #     except Exception as e:
# #         print(f"[ERROR] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
# #         return "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞."
#
# import os
# import aiohttp
# import asyncio
# from dotenv import load_dotenv
#
# # üîê –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
# load_dotenv()
# OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")
#
# async def generate_reply(description: str, project_id: int) -> str:
#     print(f"[FUNC] üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
#     print(f"[FUNC] üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}")
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞
#     if not OPENROUTER_KEY:
#         print("[ERROR] üõë –ö–ª—é—á OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
#         return "üö´ –û—à–∏–±–∫–∞: –∫–ª—é—á API –Ω–µ –∑–∞–¥–∞–Ω."
#
#     prompt = (
#         f"–¢—ã –∫—Ä—É—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä.\n"
#         f"–ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ID {project_id} –Ω–∏–∂–µ:\n\n{description}\n\n"
#         f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–∫–ª–∏–∫ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É, "
#         f"—É–ø–æ–º–∏–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç –∏ –ø–æ–¥—Ö–æ–¥. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ. "
#         f"–ù–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–µ –±–æ–ª–µ–µ 200-500 —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ. "
#         f"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ. –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∏–ø–∞ '–û—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç', –±–µ–∑ –ª–∏—à–Ω–µ–π —Å–∏–º–≤–æ–ª–∏–∫–∏. "
#         f"–ï—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—à—å —Ü–µ–Ω—É, —Ç–æ –æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–ª–∏ –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π –≥—Ä–∏–≤–Ω–µ –∏–ª–∏ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê. "
#         f"–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π '-' –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å '–° —É–≤–∞–∂–µ–Ω–∏–µ–º –î–º–∏—Ç—Ä–∏–π'."
#     )
#
#     url = "https://openrouter.ai/api/v1/chat/completions"
#     headers = {
#         "Authorization": f"Bearer {OPENROUTER_KEY}",
#         "Content-Type": "application/json"
#     }
#     payload = {
#         "model": "deepseek/deepseek-chat-v3-0324:free",
#         "messages": [{"role": "user", "content": prompt}]
#     }
#
#     timeout = aiohttp.ClientTimeout(total=25)  # ‚è±Ô∏è —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
#     try:
#         print(f"[FETCH] üì§ Payload:\n{payload}")
#         print(f"[FETCH] üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ DeepSeek...")
#
#         async with aiohttp.ClientSession(timeout=timeout) as session:
#             try:
#                 response = await session.post(url, headers=headers, json=payload)
#             except Exception as post_error:
#                 print(f"[ERROR] üß® –û—à–∏–±–∫–∞ –ø—Ä–∏ POST-–∑–∞–ø—Ä–æ—Å–µ: {post_error}")
#                 return "üö´ –°–±–æ–π –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å OpenRouter."
#
#             print(f"[FETCH] üì° –°—Ç–∞—Ç—É—Å: {response.status}")
#
#             if response.status != 200:
#                 error_text = await response.text()
#                 print(f"[ERROR] üìÑ –û—Ç–≤–µ—Ç –æ—Ç API:\n{error_text}")
#                 return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}"
#
#             data = await response.json()
#             print(f"[FETCH] üì¶ –û—Ç–≤–µ—Ç:\n{data}")
#
#             if "choices" not in data or not data["choices"]:
#                 return "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–∫–ª–∏–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
#
#             reply = data["choices"][0]["message"]["content"].strip()
#             print(f"[FUNC] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:\n{reply}")
#             return reply
#
#     except asyncio.TimeoutError:
#         print("[ERROR] ‚è≥ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞.")
#         return "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
#
#     except Exception as e:
#         print(f"[ERROR] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
#         return "üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞."

import os
import aiohttp
import asyncio
# from dotenv import load_dotenv
#
# load_dotenv()
# OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")

OPENROUTER_KEY = os.environ.get("OPENROUTER_API_KEY")

async def generate_reply(description: str, project_id: int) -> str | None:
    print(f"[FUNC] üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}")
    print(f"[FUNC] üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}")

    if not OPENROUTER_KEY:
        print("[ERROR] üîë –ö–ª—é—á OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    prompt = (
        f"–¢—ã –∫—Ä—É—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä.\n"
        f"–ù–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ID {project_id} –Ω–∏–∂–µ:\n\n{description}\n\n"
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–∫–ª–∏–∫ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É, "
        f"—É–ø–æ–º–∏–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç –∏ –ø–æ–¥—Ö–æ–¥. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ. "
        f"–ù–æ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∫–ª–∏–∫ –Ω–µ –±–æ–ª–µ–µ 200-500 —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ. "
        f"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ. –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∏–ø–∞ '–û—Ç–∫–ª–∏–∫ –Ω–∞ –ø—Ä–æ–µ–∫—Ç', –±–µ–∑ –ª–∏—à–Ω–µ–π —Å–∏–º–≤–æ–ª–∏–∫–∏. "
        f"–ï—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—à—å —Ü–µ–Ω—É, —Ç–æ –æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–ª–∏ –≤ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π –≥—Ä–∏–≤–Ω–µ –∏–ª–∏ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê. "
        f"–ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π '-' –∏–ª–∏ –Ω—É–º–µ—Ä–∞—Ü–∏—é. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å '–° —É–≤–∞–∂–µ–Ω–∏–µ–º –î–º–∏—Ç—Ä–∏–π'."
    )

    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "deepseek/deepseek-chat-v3-0324:free",
        "messages": [{"role": "user", "content": prompt}]
    }

    timeout = aiohttp.ClientTimeout(total=25)

    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            response = await session.post(url, headers=headers, json=payload)
            print(f"[FETCH] üì° –°—Ç–∞—Ç—É—Å: {response.status}")

            if response.status != 200:
                error_text = await response.text()
                print(f"[ERROR] ‚ùå API –æ—à–∏–±–∫–∞:\n{error_text}")
                return None

            data = await response.json()
            print(f"[FETCH] üì¶ –û—Ç–≤–µ—Ç:\n{data}")

            if "choices" not in data or not data["choices"]:
                print("[ERROR] ‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ choices.")
                return None

            reply = data["choices"][0]["message"]["content"].strip()
            print(f"[FUNC] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:\n{reply}")
            return reply

    except asyncio.TimeoutError:
        print("[ERROR] ‚è≥ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞.")
        return None

    except Exception as e:
        print(f"[ERROR] ‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞:\n{e}")
        return None