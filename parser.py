# parser.py
import requests
import os
import re
import unicodedata
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from config import KEYWORDS, FAVORITE_CLIENTS, ENV_PATH
from db import initialize_db, insert_project, update_project_keywords, update_project_clients, get_project_keywords, get_project_clients
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup

import httpx
import asyncio
from db import (
    insert_project,
    # has_filters,
    # is_relevant,
    # get_matched_keywords,
    # get_matched_clients,
    get_project_keywords,
    get_project_clients,
    update_project_keywords,
    update_project_clients
)
from slugify import slugify

# üî† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –¥–ª—è URL
def slugify(text):
    text = unicodedata.normalize("NFKD", text).encode("ascii", "ignore").decode("utf-8")
    text = re.sub(r"[^\w\s-]", "", text).lower()
    text = re.sub(r"[\s_]+", "-", text)
    return text.strip("-") or "project"

def has_filters():
    return bool(KEYWORDS or FAVORITE_CLIENTS)

def is_relevant(title, description, employer_login):
    content = f"{title} {description}".lower()
    keyword_match = any(k.lower() in content for k in KEYWORDS)
    author_match = employer_login and any(c.lower() == employer_login.lower() for c in FAVORITE_CLIENTS)
    return keyword_match or author_match

# üîê API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# load_dotenv(dotenv_path=ENV_PATH)
# API_TOKEN = os.getenv("FREELANCEHUNT_API_TOKEN")
API_TOKEN = os.environ.get("FREELANCEHUNT_API_TOKEN")
API_URL = os.environ.get("https://api.freelancehunt.com/v2/projects")
# API_URL = "https://api.freelancehunt.com/v2/projects"

headers = {
    "Authorization": f"Bearer {API_TOKEN}",
    "Accept": "application/json"
}

# --- –ò–º–ø–æ—Ä—Ç—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ ---
from config import KEYWORDS, FAVORITE_CLIENTS

def get_matched_keywords(title: str, description: str) -> list:
    text = f"{title} {description}".lower()
    return [kw for kw in KEYWORDS if kw.lower() in text]

def get_matched_clients(login: str) -> list:
    if login and login.lower() in [client.lower() for client in FAVORITE_CLIENTS]:
        return [login]
    return []

async def fetch_new_projects(progress_msg=None):
    results = []
    page = 1
    max_pages = 150

    total_pages = 0
    projects_uploaded = 0
    projects_failed = 0

    progress_percent = 0
    progress_step = 1

    async with httpx.AsyncClient() as client:
        while True:
            url = f"{API_URL}?page[number]={page}"
            try:
                response = await client.get(url, headers=headers)
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}: {e}")
                break

            if response.status_code != 200:
                print(f"[ERROR] –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º: {response.status_code}")
                break

            data = response.json()
            projects = data.get("data", [])
            print(f"[API] –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
            total_pages += 1

            if not projects:
                break

            for project in projects:
                try:
                    project_id = int(project.get("id"))
                    attrs = project.get("attributes", {})

                    title = attrs.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    description = attrs.get("description", "")
                    published_at = attrs.get("published_at", "")
                    budget = attrs.get("budget") or {}
                    budget_amount = budget.get("amount")
                    budget_currency = budget.get("currency")
                    skills = [s.get("name") for s in attrs.get("skills", []) if s.get("name")]
                    is_premium = attrs.get("is_premium", False)

                    employer = attrs.get("employer", {}) or {}
                    employer_login = employer.get("login")
                    employer_name = employer.get("first_name", "")
                    employer_surname = employer.get("last_name", "")

                    links = project.get("links", {}) or {}
                    api_link = links.get("self", {}).get("api")
                    pid = api_link.split("/")[-1] if isinstance(api_link, str) else None
                    slug = slugify(title)
                    web_link = f"https://freelancehunt.com/project/{slug}/{pid}.html" if slug and pid else "#"

                    if not has_filters() or is_relevant(title, description, employer_login):
                        project_data = {
                            "id": project_id,
                            "title": title,
                            "link": web_link,
                            "description": description,
                            "budget_amount": budget_amount,
                            "budget_currency": budget_currency,
                            "employer_login": employer_login,
                            "employer_name": employer_name,
                            "employer_surname": employer_surname,
                            "is_premium": is_premium,
                            "skills": skills,
                            "published_at": published_at
                        }

                        was_inserted = insert_project(project_data)
                        status = "üü¢ –î–æ–±–∞–≤–ª–µ–Ω" if was_inserted else "‚ö™Ô∏è –£–∂–µ –±—ã–ª"
                        print(f"‚Üí {title[:50]}... {status}")

                        found_keywords = get_matched_keywords(title, description)
                        matched_clients = get_matched_clients(employer_login)

                        existing_keywords = get_project_keywords(project_id)
                        existing_clients = get_project_clients(project_id)

                        if set(found_keywords) != set(existing_keywords.split(", ")) or \
                           set(matched_clients) != set(existing_clients.split(", ")):
                            update_project_keywords(project_id, ", ".join(found_keywords))
                            update_project_clients(project_id, ", ".join(matched_clients))

                        if was_inserted:
                            projects_uploaded += 1
                except Exception as e:
                    projects_failed += 1
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ ID {project.get('id')}: {e}")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            percent_now = int((page / max_pages) * 100)
            if percent_now >= progress_percent + progress_step and progress_msg:
                progress_percent += progress_step
                try:
                    await progress_msg.edit_text(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤... {progress_percent}%")
                    await asyncio.sleep(0.5)
                except Exception:
                    pass

            page += 1
            if page > max_pages:
                break

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="find_project")],
        [InlineKeyboardButton("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", callback_data="show_projects")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    if progress_msg:
        await progress_msg.edit_text(
            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüîπ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {projects_uploaded}\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {projects_failed}\n–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup
        )

    return results

async def fetch_new_projects_fast(progress_msg=None):
    results = []
    page = 1
    max_pages = 150
    duplicate_streak = 0
    duplicate_limit = 4  # üëà –ø–æ—Å–ª–µ 4 –ø–æ–¥—Ä—è–¥ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–º—Å—è

    total_pages = 0
    projects_uploaded = 0
    projects_failed = 0

    progress_percent = 0
    progress_step = 1

    async with httpx.AsyncClient() as client:
        while page <= max_pages:
            url = f"{API_URL}?page[number]={page}"
            try:
                response = await client.get(url, headers=headers)
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}: {e}")
                break

            if response.status_code != 200:
                print(f"[ERROR] –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º: {response.status_code}")
                break

            data = response.json()
            projects = data.get("data", [])
            print(f"[FAST] –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}, –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
            total_pages += 1

            if not projects:
                break

            page_had_new = False

            for project in projects:
                try:
                    project_id = int(project.get("id"))
                    attrs = project.get("attributes", {})

                    title = attrs.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    description = attrs.get("description", "")
                    published_at = attrs.get("published_at", "")
                    budget = attrs.get("budget") or {}
                    budget_amount = budget.get("amount")
                    budget_currency = budget.get("currency")
                    skills = [s.get("name") for s in attrs.get("skills", []) if s.get("name")]
                    is_premium = attrs.get("is_premium", False)

                    employer = attrs.get("employer", {}) or {}
                    employer_login = employer.get("login")
                    employer_name = employer.get("first_name", "")
                    employer_surname = employer.get("last_name", "")

                    links = project.get("links", {}) or {}
                    api_link = links.get("self", {}).get("api")
                    pid = api_link.split("/")[-1] if isinstance(api_link, str) else None
                    slug = slugify(title)
                    web_link = f"https://freelancehunt.com/project/{slug}/{pid}.html" if slug and pid else "#"

                    if not has_filters() or is_relevant(title, description, employer_login):
                        project_data = {
                            "id": project_id,
                            "title": title,
                            "link": web_link,
                            "description": description,
                            "budget_amount": budget_amount,
                            "budget_currency": budget_currency,
                            "employer_login": employer_login,
                            "employer_name": employer_name,
                            "employer_surname": employer_surname,
                            "is_premium": is_premium,
                            "skills": skills,
                            "published_at": published_at
                        }

                        was_inserted = insert_project(project_data)
                        status = "üü¢ –î–æ–±–∞–≤–ª–µ–Ω" if was_inserted else "‚ö™Ô∏è –£–∂–µ –±—ã–ª"
                        print(f"[FAST] ‚Üí {title[:50]}... {status}")

                        found_keywords = get_matched_keywords(title, description)
                        matched_clients = get_matched_clients(employer_login)

                        existing_keywords = get_project_keywords(project_id)
                        existing_clients = get_project_clients(project_id)

                        if set(found_keywords) != set(existing_keywords.split(", ")) or \
                           set(matched_clients) != set(existing_clients.split(", ")):
                            update_project_keywords(project_id, ", ".join(found_keywords))
                            update_project_clients(project_id, ", ".join(matched_clients))

                        if was_inserted:
                            projects_uploaded += 1
                            page_had_new = True
                except Exception as e:
                    projects_failed += 1
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ ID {project.get('id')}: {e}")

            # üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–Ω–æ–π –ø–æ–ª–æ—Å—ã
            if page_had_new:
                duplicate_streak = 0
            else:
                duplicate_streak += 1
                print(f"[FAST] ‚ö™Ô∏è –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —É–∂–µ –µ—Å—Ç—å –≤ –ë–î ‚Äî streak: {duplicate_streak}")
                if duplicate_streak >= duplicate_limit:
                    print(f"[FAST] üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: {duplicate_streak} –ø–æ–¥—Ä—è–¥ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏.")
                    break

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            percent_now = int((page / max_pages) * 100)
            if percent_now >= progress_percent + progress_step and progress_msg:
                progress_percent += progress_step
                try:
                    await progress_msg.edit_text(f"‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥... {progress_percent}%")
                    await asyncio.sleep(0.3)
                except Exception:
                    pass

            page += 1

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã", callback_data="find_project")],
        [InlineKeyboardButton("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", callback_data="show_projects")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    if progress_msg:
        await progress_msg.edit_text(
            f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!\nüîπ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {projects_uploaded}\n‚ö†Ô∏è –û—à–∏–±–æ–∫: {projects_failed}",
            reply_markup=markup
        )

    return results

# üöÄ –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("[INIT] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    initialize_db()

    print("[START] –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤...\n")
    fetch_new_projects()
    print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")