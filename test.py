# # from selenium import webdriver
# # from selenium.webdriver.chrome.service import Service
# # from webdriver_manager.chrome import ChromeDriverManager
# # from bs4 import BeautifulSoup
# # import time
# #
# # URL = "https://freelancehunt.com/project/treba-napisati-tekst-dlya-prezentatsiyi/1536218.html"
# #
# # # üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
# # options = webdriver.ChromeOptions()
# # options.add_argument("--start-maximized")
# # options.add_argument("--disable-blink-features=AutomationControlled")
# #
# # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
# # driver.get(URL)
# # time.sleep(3)  # ‚è≥ –ü–æ–¥–æ–∂–¥—ë–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
# #
# # # üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ HTML
# # html = driver.page_source
# # driver.quit()
# #
# # # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º
# # with open("selenium_debug.html", "w", encoding="utf-8") as f:
# #     f.write(html)
# #
# # soup = BeautifulSoup(html, "html.parser")
# # block = soup.select_one("span[data-freelancehunt-selector='description']")
# # if block:
# #     print("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n")
# #     print(block.get_text(separator="\n", strip=True))
# # else:
# #     print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#
# # import sys
# # import time
# # from selenium import webdriver
# # from selenium.webdriver.chrome.service import Service
# # from webdriver_manager.chrome import ChromeDriverManager
# # from bs4 import BeautifulSoup
# #
# # print("üìÇ –ó–∞–ø—É—Å–∫ test.py...")
# #
# # # üì® –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
# # args = sys.argv
# # print(f"üì® –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {args}")
# # if len(args) < 2:
# #     print("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞!")
# #     exit(1)
# #
# # URL = args[1]
# # print(f"üîó –¶–µ–ª–µ–≤–∞—è —Å—Å—ã–ª–∫–∞: {URL}")
# #
# # # üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
# # print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Chrome —á–µ—Ä–µ–∑ selenium...")
# # options = webdriver.ChromeOptions()
# # options.add_argument("--start-maximized")
# # options.add_argument("--disable-blink-features=AutomationControlled")
# #
# # try:
# #     driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
# #     print("‚úÖ Chrome –∑–∞–ø—É—â–µ–Ω")
# #
# #     print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞...")
# #     driver.get(URL)
# #     time.sleep(3)
# #     print("‚è≥ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
# #
# #     html = driver.page_source
# #     driver.quit()
# #     print("üíæ HTML –ø–æ–ª—É—á–µ–Ω –∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
# #
# #     # ‚õèÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
# #     with open("selenium_debug.html", "w", encoding="utf-8") as f:
# #         f.write(html)
# #     print("üß© HTML —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª selenium_debug.html")
# #
# #     # üìÑ –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è
# #     soup = BeautifulSoup(html, "html.parser")
# #     print("üîç –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ HTML...")
# #
# #     block = soup.select_one("span[data-freelancehunt-selector='description']")
# #     if block:
# #         description = block.get_text(separator="\n", strip=True)
# #         print("üì§ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º...\n")
# #         print(description)
# #     else:
# #         print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ HTML")
# #         exit(1)
# #
# # except Exception as e:
# #     print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
# #     exit(1)
#
# import sys
# import time
# from selenium import webdriver
# from selenium.webdriver.chrome.service import Service
# from webdriver_manager.chrome import ChromeDriverManager
# from selenium.webdriver.common.by import By
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from bs4 import BeautifulSoup
#
# # üî† –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
# sys.stdout.reconfigure(encoding="utf-8")
#
# print("üìÇ –ó–∞–ø—É—Å–∫ test.py...")
#
# # üì® –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
# args = sys.argv
# print(f"üì® –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {args}")
#
# if len(args) < 2:
#     print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞")
#     sys.exit(1)
#
# URL = args[1]
# print(f"üîó –¶–µ–ª–µ–≤–∞—è —Å—Å—ã–ª–∫–∞: {URL}")
#
# # üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
# options = webdriver.ChromeOptions()
# options.add_argument("--start-maximized")
# options.add_argument("--disable-blink-features=AutomationControlled")
#
# try:
#     print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Chrome —á–µ—Ä–µ–∑ webdriver...")
#     driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
#
#     print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞...")
#     driver.get(URL)
#
#     # ‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
#     print("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è...")
#     WebDriverWait(driver, 1).until(
#         EC.presence_of_element_located((By.CSS_SELECTOR, "span[data-freelancehunt-selector='description']"))
#     )
#
#     print("üíæ –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π HTML")
#     html = driver.page_source
#     driver.quit()
#     print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
#
#     # üß™ –ü–∞—Ä—Å–∏–Ω–≥ HTML
#     soup = BeautifulSoup(html, "html.parser")
#     block = soup.find("span", {"data-freelancehunt-selector": "description"})
#
#     if block:
#         description = block.get_text(separator="\n", strip=True)
#         print("üì§ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ:\n")
#         print(description)
#     else:
#         print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#         sys.exit(1)
#
# except Exception as e:
#     print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
#     try:
#         driver.quit()
#         print("üßπ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
#     except:
#         pass
#     sys.exit(1)


# test.py
import sys
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
from db import update_project_description, get_unprocessed_projects, get_all_projects

def save_description_to_db(project_id: int, description: str):
    print(f"üì• –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ë–î –¥–ª—è ID {project_id}")
    try:
        update_project_description(project_id, description)
        print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ID {project_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –ë–î: {e}")

sys.stdout.reconfigure(encoding="utf-8")
print("üìÇ –ó–∞–ø—É—Å–∫ test.py...")

args = sys.argv
print(f"üß™ –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: {args}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if len(args) < 2:
    print("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç: ID –∏–ª–∏ —Å—Å—ã–ª–∫–∞.")
    sys.exit(1)

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
project_id = None
URL = None

try:
    # –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ ID
    arg1 = args[1]
    print(f"üîç –ê—Ä–≥—É–º–µ–Ω—Ç #1: {arg1}")

    if arg1.isdigit():
        project_id = int(arg1)
        print(f"üì® –†–∞—Å–ø–æ–∑–Ω–∞–Ω ID: {project_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –ë–î
        found = False
        # for db_id, link in get_unprocessed_projects():
        for db_id, link in get_all_projects():
            # print(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞: db_id={db_id}, link={link}")
            if db_id == project_id:
                URL = link
                found = True
                print(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {URL}")
                break

        if not found:
            print(f"‚ùå –°—Å—ã–ª–∫–∞ –ø–æ ID {project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.")
            sys.exit(1)

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º URL
        if len(args) >= 3:
            override_url = args[2]
            print(f"üîÑ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫—É: {override_url}")
            URL = override_url

    else:
        URL = arg1
        print(f"üîó –†–∞—Å–ø–æ–∑–Ω–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ —Å—Å—ã–ª–∫–∞: {URL}")

        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å—Å—ã–ª–∫–∏
        try:
            project_id = int(URL.strip("/").split("/")[-1].split(".")[0])
            print(f"üì® –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π ID –∏–∑ —Å—Å—ã–ª–∫–∏: {project_id}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Å—Å—ã–ª–∫–∏: {e}")
            project_id = None

except Exception as e:
    print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {e}")
    sys.exit(1)

if not URL:
    print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
    sys.exit(1)

print(f"üìå –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ID={project_id}, URL={URL}")

# üß≠ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
options = webdriver.ChromeOptions()
options.add_argument("--start-maximized")
options.add_argument("--disable-blink-features=AutomationControlled")

try:
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º URL: {URL}")
    driver.get(URL)

    print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è...")
    WebDriverWait(driver, 5).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "span[data-freelancehunt-selector='description']"))
    )

    print("üìÑ –ü–æ–ª—É—á–∞–µ–º HTML...")
    html = driver.page_source
    driver.quit()
    print("üõë –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç.")

    soup = BeautifulSoup(html, "html.parser")
    block = soup.find("span", {"data-freelancehunt-selector": "description"})

    if block:
        description = block.get_text(separator="\n", strip=True)
        print(f"üì¶ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ:\n{description}")
        if project_id:
            save_description_to_db(project_id, description)
        else:
            print("‚ö†Ô∏è ID –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î.")
    else:
        print("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

except Exception as e:
    print(f"üí£ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
    try:
        driver.quit()
        print("üõë –ë—Ä–∞—É–∑–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.")
    except:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞.")
    sys.exit(1)